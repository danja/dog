;; random
LDAi AC ; put 0xAC in acc A
LDBi E1 ; put 0xE1 in acc B
LSR ; shift right (and into carry)
BCC FE; branch -2 if carry clear
EORAi B4 ; toggle mask
EORBi 00
PAUSE
BZC FB ; branch up to the shift
HALT

; Bach
TEMPO 30
TONE 13 04
REST 04
TONE 1F 04
REST 04
TONE 1E 04
REST 04
TONE 12 04
REST 04
TONE 10 04
REST 04
TONE 1C 04
REST 04
TONE 1A 04
REST 04
TONE 0E 04
REST 04
TONE 0C 04
REST 04
TONE 34 01
REST 01
TONE 30 01
REST 01
TONE 2D 01
REST 01
TONE 2B 01
REST 01
TONE 2A 01
REST 01
TONE 2B 01
REST 01
TONE 12 08
REST 08
HALT

NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
NOP
HALT


; DEBUG
LDAi F6 ; put 0xF6 in acc A
STAa 99 10 ; store acc A at 0199
LDBa  ; load acc B from 0199
CAB ; compare A & B
BZS 02; branch if zero set
ERR
HALT
OK
HALT

; 0 through 127 are, in hex, $00 through $7F, respectively.
; -128 through -1 are, in hex, $80 through $FF, respectively.

; test LDAi & BZS
LDAi F6 ; put 0xF6 in acc A
BZS 01 ; skip next if zero set
ERR
LDAi

LDAi 81  ; negative, non-zero
PAUSE


LDAi 05 ; positive, non-zero
LDAi 00 ; zero
LDAi 81 ; negative
HALT

LDAi F6 ; put 0xF6 in acc A
STAa 99 01 ; store acc A at 0199
LDBa 99 01  ; load acc B from 0199
CAB ; compare A & B
BZS 01; branch if zero set
ERR ; display Err
OK ; display ok
HALT


LDAi AC ; put 0xAC in acc A
LDBi E1 ; put 0xE1 in acc B
LSR ; shift right
BCC FE; branch -2 if carry clear
EORAi B4 ; toggle mask
EORBi 00
BZC FA
HALT
